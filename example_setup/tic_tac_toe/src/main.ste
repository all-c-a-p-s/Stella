//this is an example program to play tic-tac-toe
//what's cool about this example is that it showcases Stella making a nice (small) project but also highlights some of its room for improvement:
// - Stella does not have functionality for reading user input, so the game must be played one move at a time
// - Stella does not have enums, which means strings with "magic values" have been used
// - you have to copy arrays manually in Stella

function evaluate(board: string[9], side: string) -> string = {
    let mut evaluation: string = "Unknown"

    let mut i: int = 0
    let mut draw: bool = true 
    //start with the assumption board is full and iterate to disprove this
    loop i < 9 {
        if board[i] == "_" {
            draw = false
        }
        i = i + 1
    }

    if draw {
        evaluation = "Draw"
        //this is overwritten below in the case that the 9th move completes a line
    }

    //check rows
    if ((board[0] == board[1]) && (board[1] == board[2])) && (board[0] != "_") {
        if board[0] == side {
            evaluation = "Win"
        } else {
            evaluation = "Loss"
        }
    } else if ((board[3] == board[4]) && (board[4] == board[5])) && (board[3] != "_") {
        if board[3] == side {
            evaluation = "Win"
        } else {
            evaluation = "Loss"
        }
    } else if ((board[6] == board[7]) && (board[7] == board[8])) && (board[6] != "_") {
        if board[6] == side {
            evaluation = "Win"
        } else {
            evaluation = "Loss"
        }
    }

    //check columns
    if ((board[0] == board[3]) && (board[3] == board[6])) && (board[0] != "_") {
        if board[0] == side {
            evaluation = "Win"
        } else {
            evaluation = "Loss"
        }
    } else if ((board[1] == board[4]) && (board[4] == board[7])) && (board[1] != "_") {
        if board[1] == side {
            evaluation = "Win"
        } else {
            evaluation = "Loss"
        }
    } else if ((board[2] == board[5]) && (board[5] == board[8])) && (board[2] != "_") {
        if board[2] == side {
            evaluation = "Win"
        } else {
            evaluation = "Loss"
        }
    }

    //check diagonals
    if ((board[0] == board[4]) && (board[4] == board[8])) && (board[0] != "_") {
        if board[0] == side {
            evaluation = "Win"
        } else {
            evaluation = "Loss"
        }
    } else if ((board[2] == board[4]) && (board[4] == board[6])) && (board[2] != "_") {
        if board[2] == side {
            evaluation = "Win"
        } else {
            evaluation = "Loss"
        }
    }

    evaluation
}

function opposite_evaluation(evaluation: string) -> string = {
    let mut res: string = "Unknown"
    if evaluation == "Win" {
        res = "Loss"
    } else if evaluation == "Loss" {
        res = "Win"
    } else if evaluation == "Draw" {
        res = "Draw"
    }
    res
}

function opposite_side(side: string) -> string = {
    let mut res: string = "O"
    if side == "O" {
        res = "X"
    }
    res
}

function minimax(board: string[9], side: string) -> string = {
    let mut res: string = "Loss"
    let evaluation: string = evaluate(board, side)

    if evaluation == "Unknown" {
        let mut square: int = 0
        loop square < 9 {
            if board[square] == "_" {
                let mut copy: string[9] = board
                copy[square] = side
                let opponent: string = opposite_side(side)

                let opponent_perspective: string = minimax(copy, opponent)
                let conditional_evaluation: string = opposite_evaluation(opponent_perspective)

                if conditional_evaluation == "Win" {
                    res = "Win"
                    break
                } else if conditional_evaluation == "Draw" {
                    res = "Draw"
                }
            }
            square = square + 1
        }
    } else {
        res = evaluation
    }

    res
}

function main() -> IO = {
    //The user should update the boards here and the side variable before running the program
    let board: string[9] = ["_", "_", "_", "_", "_", "_", "_", "_", "_"]
    let mut future_board: string[9] = ["_", "_", "_", "_", "_", "_", "_", "_", "_"]
    let side: string = "X"

    let mut square: int = 0
    let mut found_a_move: bool = false
    loop square < 9 {
        if board[square] == "_" {
            let mut copy: string[9] = board
            copy[square] = side

            let opponent: string = opposite_side(side)

            let opponent_perspective: string = minimax(copy, opponent)
            let conditional_evaluation: string = opposite_evaluation(opponent_perspective)

            if conditional_evaluation == "Win" {
                let mut i: int = 0
                loop i < 9 {
                    future_board[i] = copy[i]
                    i = i + 1
                }
                break
            } else if conditional_evaluation == "Draw" {
                let mut i: int = 0
                loop i < 9 {
                    future_board[i] = copy[i]
                    i = i + 1
                }
            } else if !found_a_move {
                //initialise to the first move we can actually make
                //then improve on this later
                let mut i: int = 0
                loop i < 9 {
                    future_board[i] = copy[i]
                    i = i + 1
                }
                found_a_move = true
            }
        }
        square = square + 1
    }

    let mut row: int = 0
    loop row < 3 {
        let mut col: int = 0
        loop col < 3 {
            let i: int = row * 3 + col
            print!(future_board[i])
            col = col + 1
        }
        print!("\n")
        row = row + 1
    }
}