function square(x: int) -> int = {
  //a function returning a primitive data type
  x * x
}

function invert_and_multiply(x: (int, int), y: int) -> (int, int) = {
  //a function returning a tuple
  (x.1 * y, x.0 * y)
}

function invert(tup: (string, string)) -> (string, string) = {
  (tup.1, tup.0)
}

function add_one_to_all(nums: int[10]) -> int[10] = { 
  //a function returning an array
  let mut res: int[10] = nums
  let mut i: int = 0
  loop i < 10 {
    res[i] = res[i] + 1
  }
  let foo: (int) = (5) //tuples can be of size one or even zero
  res[9] = foo.0
  res
}

function main() -> IO = {
  //main function with special IO return type
  println!("hi")
  let foo: (int) = (2)
  let nums: int[10] = [0, 1, 2, 3, 4, foo.0, 6, 7, 8, 9]
  let bar: (string, string) = ("seba", "london")
  let baz: (string, string) = invert(bar)

  println!("it works")
}
